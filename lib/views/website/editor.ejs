
<div class="container-fluid" id="webhookit-app">
	
	<div class="loading" id="loadingPanel">
		<h2>Loading ...</h2>
	</div>
	
</div>

<style type="text/css">
      body {
        padding-top: 60px;
      }

	#webhookit-app h1 {
	    padding: 0;
	}

	#webhookit-app .loading {
	    opacity: 0.5;
	    -webkit-transition: opacity 0.15s;
	}
	
	#loadingPanel {
		margin: 50px auto;
		width: 400px;
	}
	
	.yui3-layer-content {
		border: 1px solid black;
		overflow: scroll;
	}
	
	ul.containerTypes {
		list-style: none;
		margin: 0;
	}
	ul.containerTypes li {
		margin: 2px;
		padding: 2px;
		border-radius: 3px;
		border: 1px solid #ccc;
		background-color: #ddd;
		cursor: move;
	}
    </style>


<script id="t-editor" type="text/x-handlebars-template">
    <div class="container-fluid">
      <div class="sidebar">
        <div class="well">

          <h5 class="no-toc">Container Types</h5>

	    <ul class="containerTypes">
	    {{#each containerTypes}}
	        <li class="containerType yui3-g">
	            <div class="containerType-name yui3-u-2-3">{{name}}</div>
	        </li>
	    {{/each}}
	    </ul>

        </div>
      </div>

      <div class="content">
        
        <div class="row" id="wireit-app">
			<div class="span16">
				Name: <input id="wiring-name" />
				<a class="btn primary" id="wiring-save-btn">Save</a>
			</div>
			<div class="span16" id="layer-container">
			</div>
        </div>

      </div>

    </div>
</script>

<!--Webhookit editor -->
<script type="text/javascript" src="/javascripts/webhookit/editor.js"></script>

<script>
YUI({filter: 'raw', combine: false}).use('webhookit-editor', function (Y) {
	window.Y = Y; //debug
	var containerTypes = new Y.ContainerTypeList();
	
	containerTypes.add([
  	{
    "name": "input",
	"category": "System",
	"icon": "/images/icons/door_in.png",
    "config": {
       "type": "FormContainer",
 		"headerContent": "input",
 		"fields": [
 			{"type": "type", "label": "Value", "name": "input", "wirable": false, "value": { "type":"string", "typeInvite": "input name" } }
 		],
 		"children": [
			{ align: {points:['tl', 'bc']}, dir: [0,1], name: 'out' }
		   ]
    }
 },
 
 {
    "name": "output",
	"category": "System",
	"icon": "/images/icons/door_out.png",
    "config": {
       "type": "FormContainer",
 		"headerContent": "output",
 		"fields": [ 
 			{"type": "string", "label": "name", "name": "name", "wirable": false }
 		],
	   	"children": [
			{ align: {points:['tl', 'tc']}, dir: [0,-1], name: 'in' }
 		]
    }
 }
]);

	containerTypes.add(<%- JSON.stringify(definitions) %>);
	
	var wirings = new Y.WiringModelList();
	wirings.load();
	
	Y.wireitApp = new Y.WireItApp({
		// We force this to false for this example app because there is no server.
		serverRouting: false,
		containerTypes: containerTypes,
		modelList: wirings,
		
		

  	<% if(wiring !== null) { %>
  	  wiring:  new Y.WiringModel(<%- JSON.stringify(wiring) %>),
  	<% } %>
		
    container   : '#webhookit-app',
    linkSelector: '#webhookit-app a'
	});

	Y.wireitApp.render();
	Y.one('#loadingPanel').hide();

});
</script>

