<div class="container">
  
  <%- messages() %>
  
  
  <div class="row">
    <h1><%- wiring.name %></h1>
    
    <p>
    <% if(!!wiring.config && !!wiring.config.properties && wiring.config.properties.description) { %>
      <%= wiring.config.properties.description %>
    <% } else { %>
      No description yet
      <% } %>
    </p>
    
    <div class="timeago">updated <%= timeago( new Date(Date.parse(wiring.updated_at)) ) %></div>
    <div class="timeago">created <%= timeago( new Date(Date.parse(wiring.created_at)) ) %></div>
  </div>
  
  
  <div class="row">
    
    <div class="span8">
      <h3><img src="/images/icons/clock.png"> Source</h3>
      <div class="sourceInfos">
        <p>Using <%= wiring.containers.length %> modules :
          <ul>
            <% for(var i = 0; i < wiring.containers.length ; i++) { %>
              <li><%= wiring.containers[i].containerType %></li>
            <% } %>
          </ul>
        </p>

        <p><a href="/wirings/<%- wiring._id.toHexString() %>/edit">Edit-source</a></p>
      </div>
    </div>
    
    <div class="span8">
      <h3><img src="/images/icons/clock.png"> Cron</h3>
      <div class="cronInfos">
        <p>Cron Rule: <%= wiring.cron %> <a href="/wirings/<%- wiring._id.toHexString() %>/edit-cron">Edit</a></p>
      </div>
    </div>
    
  </div>
  
  
  <div class="row">
    
    <div class="span8">
      <h3><img src="/images/icons/eye.png"> Template</h3>
      <div class="templateInfos">
        Content-Type: <%= wiring.template_content_type %>
        <p><span style="font-style: italic; font-size: 80%;"><%= wiring.template ? wiring.template.substr(0,30)  : "" %>...</span> <a href="/wirings/<%- wiring._id.toHexString() %>/edit-template">Edit</a></p>
      </div>
    </div>
    
    <div class="span8">
      <h3><img src="/images/icons/world_link.png"> Public execution</h3>
      <div class="templateInfos">
        Public URL: <%- wiring.publicname ? "<a href='/wirings/public/"+wiring.publicname+"'>/wirings/public/"+wiring.publicname+"</a>" : "not defined" %>
      </div>
    </div>
    
  </div>
  
  
  <div class="row">
    
    <div class="span16">
    
      <h3><img src="/images/icons/script_go.png"> Run</h3>
      <div class="box">
        
        <div id='formParams'>
        <% 
        fields = []
        wiring.containers.forEach(function(m){
          if(m.containerType == "input") {
            fields.push( m.value.input);
          }
          });
          
          if(fields.length > 0) { %>
            <h4>Parameters</h4>
          <% } %>
        </div>
        
        <br />

        <button id="runButton" class="btn primary">Run</button>

        <br /><br />

        <p><a href="/wirings/<%- wiring._id.toHexString() %>/run?notemplate=1">Run without template</a></p>

        <p><a href="#" id="toggleUrlContainer">Show the url</a></p>

        <p id="runUrl" style='display: none;'><span id='urlContainer'></span></p>
        <br />
      </div>

  <script>
  var fields = <%- JSON.stringify(fields) %>;
  var defaultValue = <%-  JSON.stringify(params) %>;
  var baseUrl = "/wirings/<%- wiring._id.toHexString() %>";

  YUI_config.groups.inputex.combine = true;
  YUI_config.groups.inputex.root = 'inputex/src/';
  YUI_config.groups.inputex.filter = 'raw';
  YUI({
  	combine: false
  }).use('inputex-group', 'inputex-string', 'inputex-jsontreeinspector', function(Y) {
  
  
    /*fields.push({
    	type: "radio", 
    	"name":"_render", value:"html", label: "outputFormat", choices: ["html","json","jsonp","xml"],
    	interactions: [
           { valueTrigger: "jsonp", actions: [ { name: 'callback', action: 'show'}] },
    		// TODO: We can do much better than this using inputEx interactions
    		{ valueTrigger: "html", actions: [{name: 'callback',action: 'hide'}] },
    		{ valueTrigger: "json", actions: [{name: 'callback',action: 'hide'}] },
    		{ valueTrigger: "xml", actions: [{name: 'callback',action: 'hide'}]}
    	]
    });

    fields.push({type: "string", "name":"callback", value:"myFunc", label: "JSONP callback"});*/

    var url = null;
    var form = null;

    var getUrl = function(value) {
    	var p = [];
    	for(var key in value) { 
    		if(value.hasOwnProperty(key) && key != "_render" && key != "callback")	{
    			p.push(key+'='+encodeURIComponent(value[key]) ); 
    		}
    	}
    	var url = baseUrl+"/run"+(p.length > 0 ? "?" : "")+p.join('&');
    	return url;
    };

    var onUpdate = function(e,params) { 
    	var value = params[0]; 
    	url = getUrl(value);
    	console.log("url", url);
    	//Y.JSON.stringify(value); 
    	Y.one('#urlContainer')._node.innerHTML = url; 
    };

    form = new Y.inputEx.Group({parentEl: 'formParams', fields: fields });
    form.setValue(defaultValue);
    form.on('updatedEvt', onUpdate);

    Y.one('#toggleUrlContainer').on('click', function(e) {
    	e.stop();

    	var runUrl = Y.one('#runUrl');
    	var link = Y.one('#toggleUrlContainer');
  	
    	// TODO: 
    	if(runUrl.style.display == '') {
    		runUrl.style.display = 'none';
    		link.innerHTML = "Show the url";
    	}
    	else {
    		runUrl.style.display = '';
    		link.innerHTML = "Hide the url";
    	}
  	
    });


    Y.one('#runButton').on('click', function(e) {
    	var value = form.getValue(), url = getUrl(value);
    	window.location = url;
    });
  
  
  });


  </script>
  
  </div>
  </div>
  
</div>